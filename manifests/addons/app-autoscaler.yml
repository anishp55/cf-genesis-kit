releases:
- name: "app-autoscaler"
  version: "2.0.0"
  url: "https://bosh.io/d/github.com/cloudfoundry-incubator/app-autoscaler-release?v=2.0.0"
  sha1: "b2bda4bd9ff9b902fa6a6f3d37c13b681b3402b0"
- name: bpm
  version: 1.1.1

exodus:
  autoscaler_enabled: true
  autoscaler_servicebroker_username: (( vault meta.vault "/autoscaler/servicebroker_account:username" ))
  autoscaler_servicebroker_password: (( vault meta.vault "/autoscaler/servicebroker_account:password" ))
  autoscaler_servicebroker_url: (( grab params.autoscaler_broker_url || meta.broker_url ))

instance_groups:
# APIServer Instance Group
- name: as-api
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_api_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_api_vm_type || "default" ))
  jobs:
  - name: apiserver
    release: app-autoscaler
    properties:
      autoscaler:
        api_server:
          cache_ttl: 600
          http_client_timeout: 60000
          service_offering_enabled: true
          db_config: &dbConfig
            idle_timeout: 1000
            max_connections: 10
            min_connections: 0
          port: 6100
          publicPort: &apiServerPublicPort 6106
          health:
            port: 6200
          ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_server:certificate" ))
          server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_server:key" ))
          public_ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          public_server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_public:certificate" ))
          public_server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_public:key" ))
          require_consul: false
          scheduler:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))
          scaling_engine:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
          metrics_collector:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))
          eventgenerator:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/eventgenerator_client:key" ))    
          service_broker:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/servicebroker_client:key" ))
        policy_db: &database
          databases:
          - name: autoscaler
            tag: default
          address: (( grab params.autoscalerdb_host || params.external_db_host ))
          db_scheme: postgres
          port: (( grab params.autoscalerdb_port || params.external_db_port ))
          roles:
          - name: (( grab params.autoscalerdb_user || params.external_db_username ))
            password: (( grab params.autoscalerdb_password || params.external_db_password ))
            tag: default 
          connection_config: &databaseConnectionConfig
            max_open_connections: 100
            max_idle_connections: 10
            connection_max_lifetime: 60s
        cf:
          api: (( concat "https://" meta.api_hostname ))
          skip_ssl_validation: (( grab params.skip_ssl_validation ))
          grant_type: client_credentials
          client_id: app_autoscaler
          secret: (( vault meta.vault "/uaa/client_secrets:app_autoscaler" )) 
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats}
    properties:
      route_registrar:
        routes:
        - name: api_server_public_api
          registration_interval: 20s
          port: *apiServerPublicPort
          tags:
            component: api_server
          uris:
            - (( concat "autoscaler." params.system_domain ))
      
# Scheduler Instance Group
- name: as-scheduler
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_scheduler_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_scheduler_vm_type || "default" ))
  jobs:
  - name: scheduler
    release: app-autoscaler
    properties:
      autoscaler:
        scheduler:
          port: &schedulerPort 6102
          health:
            port: &schedulerHealthPort 6202 
          job_reschedule_interval_millisecond: 10000
          job_reschedule_maxcount: 6
          notification_reschedule_maxcount: 3
          ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          require_consul: false
          server_cert: (( vault meta.vault "/autoscaler/certs/scheduler_server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/certs/scheduler_server:key" ))
          scaling_engine:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
        scheduler_db: *database
        policy_db: *database
# Service-Broker Instance Group
- name: as-broker
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_broker_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_broker_vm_type || "default" ))
  jobs:
  - name: servicebroker
    release: app-autoscaler
    properties:
      autoscaler:
        service_broker:
          db_config: *dbConfig
          publicPort: &servicebrokerPort 6101
          port: 6107
          health:
            port: 6201
          ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          server_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/certs/servicebroker_server:key" ))
          public_ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          public_server_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_public:certificate" ))
          public_server_key: (( vault meta.vault "/autoscaler/certs/servicebroker_public:key" ))
          username: (( vault meta.vault "/autoscaler/servicebroker_account:username"))
          password: (( vault meta.vault "/autoscaler/servicebroker_account:password"))
          http_request_timeout: 5000
          require_consul: false
          dashboard_redirect_uri: ""
          catalog: 
            services:
            - id: autoscaler-guid
              name: autoscaler
              description: Automatically increase or decrease the number of application instances based on a policy you define.
              bindable: true
              plans: (( grab params.autscaler_plans || meta.example_plan ))
          api_server:
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/apiserver_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/apiserver_client:key" ))
        binding_db: *database
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats}
    properties:
      route_registrar:
        routes:
        - name: autoscaler_service_broker
          registration_interval: 20s
          port: *servicebrokerPort
          tags:
            component: autoscaler_service_broker
          uris:
            - (( grab meta.broker_url ))

# Metric-collector Instance Group
- name: as-collector
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_collector_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_collector_vm_type || "default" ))
  jobs:
  - name: metricscollector
    release: app-autoscaler
    properties:
      autoscaler:
        instancemetrics_db: *database
        policy_db: *database
        lock_db: *database
        instancemetrics_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        require_consul: false
        cf: &cfCredentials
          api: (( concat "https://" meta.api_hostname ))
          grant_type: password
          username: admin
          password: (( vault meta.vault "/admin_user:password" ))
          client_id: app_autoscaler
          secret: (( vault meta.vault "/uaa/client_secrets:app_autoscaler" ))
          skip_ssl_validation: (( grab params.skip_ssl_validation ))
        metricscollector:
          logging:
            level: debug
          server:
            port: &metricsCollectorPort 6103
          health: 
            port: &metricsCollectorHealthPort 6203
          collector:
            refresh_interval: 60s
            collect_interval: 30s
            save_interval: 5s
          enable_db_lock: false
          ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          server_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/certs/metricscollector_server:key" ))

# Event-Generator Instance Group
- name: as-scaler
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_scaler_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_scaler_vm_type || "default" ))
  jobs:
  - name: eventgenerator
    release: app-autoscaler
    properties:
      autoscaler:
        appmetrics_db: *database
        policy_db: *database
        lock_db: *database
        appmetrics_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        require_consul: false
        eventgenerator:
          logging:
            level: debug
          server:
            port: &eventGeneratorPort 6105
          health:
            port: &eventGeneratorHealthPort 6205
          ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          server_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/certs/eventgenerator_server:key" ))
          aggregator:
            aggregator_execute_interval: 40s
            policy_poller_interval: 40s
            metric_poller_count: 20
            app_monitor_channel_size: 200
            save_interval: 5s
            app_metric_channel_size: 1000
          evaluator:
            evaluation_manager_execute_interval: 40s
            evaluator_count: 20
            trigger_array_channel_size: 200
          defaultStatWindowSecs: 300
          defaultBreachDurationSecs: 300
          circuitBreaker:
            back_off_initial_interval: 5m
            back_off_max_interval: 120m
            consecutive_failure_count: 5
          enable_db_lock: false
          scaling_engine:
            host: scalingengine.service.cf.internal
            port: *scalingEnginePort
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
          metricscollector:
            host: metricscollector.service.cf.internal
            port: *metricsCollectorPort
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))

# Scaling-Engine Instance Group
- name: as-engine
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_engine_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_engine_vm_type || "default" ))
  jobs:
  - name: scalingengine
    release: app-autoscaler
    properties:
      autoscaler:
        scalingengine_db: *database
        scheduler_db: *database
        policy_db: *database
        lock_db: *database
        scalingengine_db_connection_config: *databaseConnectionConfig
        scheduler_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        require_consul: false
        cf: *cfCredentials
        scalingengine:
          logging:
            level: debug
          server:
            port: &scalingEnginePort 6104
          health:
            port: &scalingEngineHealthPort 6204
          defaultCoolDownSecs: 300
          lockSize: 32
          ca_cert:  (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
          server_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/certs/scalingengine_server:key" ))
          db_lock:
            ttl: 15s
            retry_interval: 5s
          enable_db_lock: true

#as-operator
- name: as-operator
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_engine_instances || 1 ))
  networks:
  - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
  stemcell: default
  vm_type: (( grab params.autoscaler_engine_vm_type || "default" ))
  jobs:
  - name: operator
    release: app-autoscaler
    properties:
      autoscaler:
        cf: *cfCredentials
        policy_db: *database
        appmetrics_db: *database
        instancemetrics_db: *database
        scalingengine_db: *database
        policy_db_connection_config: *databaseConnectionConfig
        appmetrics_db_connection_config: *databaseConnectionConfig
        instancemetrics_db_connection_config: *databaseConnectionConfig
        scalingengine_db_connection_config: *databaseConnectionConfig
        lock_db: *database
        require_consul: false
        operator:
          http_client_timeout: 60s
          app_sync_interval: 24h
          scaling_engine:
            port: *scalingEnginePort
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))        
          scheduler:
            port: *schedulerPort
            ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
            client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))
          db_lock: 
            ttl: 15s
            retry_interval: 5s
          enable_db_lock: false
          logging:
            level: debug 
          health:
            port: &operatorHealthPort 6208          

meta:
  broker_url: (( grab params.autoscaler_broker_url || meta.broker_url_default ))
  broker_url_default: (( concat "autoscalerservicebroker." params.system_domain ))
  sb_port: (( grab params.autoscaler_servicebroker_port || 6101 ))
  example_plan:
  - id: autoscaler-example-plan-id
    name: autoscaler-example-plan
    description: This is the example service plan for the Auto-Scaling service.
